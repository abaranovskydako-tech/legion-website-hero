#!/usr/bin/env python3
"""
Legion Project - QA Testing Script
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from datetime import datetime

class QATester:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.report = {
            "timestamp": datetime.now().isoformat(),
            "project": "Legion Website",
            "tests": [],
            "summary": {
                "total": 0,
                "passed": 0,
                "failed": 0,
                "skipped": 0
            }
        }
    
    def run_test(self, name, test_func, *args, **kwargs):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {name}")
        
        try:
            result = test_func(*args, **kwargs)
            self.report["tests"].append({
                "name": name,
                "status": "PASSED" if result else "FAILED",
                "result": result
            })
            
            if result:
                self.report["summary"]["passed"] += 1
                print(f"‚úÖ {name}: –ü–†–û–ô–î–ï–ù")
            else:
                self.report["summary"]["failed"] += 1
                print(f"‚ùå {name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            self.report["tests"].append({
                "name": name,
                "status": "ERROR",
                "error": str(e)
            })
            self.report["summary"]["failed"] += 1
            print(f"üí• {name}: –û–®–ò–ë–ö–ê - {e}")
        
        self.report["summary"]["total"] += 1
    
    def test_build(self):
        """–¢–µ—Å—Ç —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            result = subprocess.run(
                ["npm", "run", "build"],
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=300
            )
            return result.returncode == 0
        except subprocess.TimeoutExpired:
            return False
    
    def test_dependencies(self):
        """–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            result = subprocess.run(
                ["npm", "list", "--depth=0"],
                cwd=self.project_root,
                capture_output=True,
                text=True
            )
            return result.returncode == 0
        except Exception:
            return False
    
    def test_file_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
        required_files = [
            "package.json",
            "next.config.js",
            "tsconfig.json",
            "tailwind.config.ts",
            "app/layout.tsx",
            "app/page.tsx",
            "app/components/hero.tsx"
        ]
        
        missing_files = []
        for file_path in required_files:
            if not (self.project_root / file_path).exists():
                missing_files.append(file_path)
        
        return len(missing_files) == 0
    
    def test_hero_image(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        hero_image = self.project_root / "public" / "hero_team_adapted.jpg"
        return hero_image.exists()
    
    def test_crewai_setup(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CrewAI"""
        crewai_files = [
            "src/crew/legion_crew.py",
            "src/agents/tech_lead.py",
            "src/agents/seo_specialist.py",
            "src/agents/ui_ux_designer.py",
            "src/tasks/tech_tasks.py",
            "src/tasks/seo_tasks.py",
            "src/tasks/design_tasks.py"
        ]
        
        missing_files = []
        for file_path in crewai_files:
            if not (self.project_root / file_path).exists():
                missing_files.append(file_path)
        
        return len(missing_files) == 0
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ QA —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Legion...")
        
        self.run_test("–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞", self.test_build)
        self.run_test("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", self.test_dependencies)
        self.run_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", self.test_file_structure)
        self.run_test("Hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", self.test_hero_image)
        self.run_test("CrewAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", self.test_crewai_setup)
        
        self.generate_report()
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"""
        report_file = self.project_root / "QA_REPORT.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        print(f"üìà –ò—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.report['summary']['total']}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.report['summary']['passed']}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.report['summary']['failed']}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.report['summary']['skipped']}")

if __name__ == "__main__":
    tester = QATester()
    tester.run_all_tests()
